# -*- coding: utf-8 -*-
"""
Created on Mon Dec 30 02:19:34 2019

@author: William
"""
def iterate(start,des,route,cost,path):
    """if (des<start and start<=20) or start>des+21:
        #print("route pop:{}".format(route))
        route.pop()
        return
    if start==des:
        path.append(route.copy())
        #print("route finish pop:{}".format(route))
        route.pop()
        return #route.append(des)
    else:"""
    if 1==1:
        backoff1 = len(route)
        for i in range(0,32):
            #backoff2 = len(route)
            flag=0
            if cost[start][i]==-1 or i==start-1: continue
            elif len(route)>2:
                for j in range(0,len(route)):
                    if route[j]==i:
                        #print("route pop:{}".format(route))
                        #route.pop()
                        flag=1
                        break
                if flag==1:
                    flag=0
                    continue
                elif (des<i and i<=20) or i>des+21: continue
                elif i==des:
                    cpy = route.copy()
                    cpy.append(i)
                    if cost[route[-1]][i]!=-1 : path.append(cpy)
                    for i in range(0,len(route)-backoff1) : route.pop()
                    return
                else:
                    while cost[route[-1]][i]==-1: route.pop()
                    route.append(i)
                #print("route add:{}".format(route))
                iterate(i,des,route,cost,path)
            else:
                    if (des<i and i<=20) or i>des+21: continue
                    elif i==des:
                        cpy = route.copy()
                        cpy.append(i)
                        if cost[route[-1]][i]!=-1 : path.append(cpy)
                        for i in range(0,len(route)-backoff1) : route.pop()
                        return
                    else: 
                        while cost[route[-1]][i]==-1: route.pop()
                        route.append(i)
                    #print("route add:{}".format(route))
                    iterate(i,des,route,cost,path)
        for i in range(0,len(route)-backoff1) : route.pop()
def cp(start,des,cost,time,path):
    c=[]
    t=[]
    cp=[]
    count=0
    C=[-1, 23, 73, 95, 307, 480, 445, 532, 715, 755, 788, 970, 993, 1117, 1169, 1375, 1480, 1503, 1526, 1549, 1572, 0, 40, 160, 290, 430, 700, 820, 930, 1070, 1350, 1480, 23, -1, 50, 72, 277, 450, 415, 502, 685, 725, 758, 940, 963, 1087, 1139, 1345, 1450, 1473, 1496, 1519, 1542, 40, 0, 130, 260, 400, 670, 790, 900, 1040, 1320, 1450, 73, 50, -1, 23, 112, 155, 190, 277, 589, 629, 662, 844, 867, 991, 1043, 1249, 1354, 1377, 1400, 1423, 1446, 90, 50, 34, 164, 304, 574, 694, 804, 944, 1224, 1354, 95, 72, 23, -1, 89, 132, 167, 254, 467, 507, 540, 722, 745, 869, 921, 1127, 1232, 1255, 1278, 1301, 1324, 112, 72, 57, 106, 182, 452, 572, 682, 822, 1102, 1232, 307, 277, 112, 89, -1, 43, 78, 165, 378, 418, 451, 633, 656, 780, 832, 1038, 1143, 1166, 1189, 1212, 1235, 317, 277, 147, 17, 93, 363, 483, 593, 733, 1013, 1143, 480, 450, 155, 132, 43, -1, 35, 122, 335, 375, 408, 590, 613, 737, 789, 995, 1100, 1123, 1146, 1169, 1192, 490, 450, 320, 190, 50, 320, 440, 550, 690, 970, 1100, 445, 415, 190, 167, 78, 35, -1, 87, 300, 340, 373, 555, 578, 702, 754, 960, 1065, 1088, 1111, 1134, 1157, 455, 415, 285, 155, 15, 285, 405, 515, 655, 935, 1065, 532, 502, 277, 254, 165, 122, 87, -1, 32, 72, 105, 184, 207, 261, 313, 722, 837, 860, 883, 906, 929, 542, 502, 372, 242, 102, 47, 177, 277, 427, 697, 837, 715, 685, 589, 467, 378, 335, 300, 32, -1, 40, 73, 152, 175, 229, 281, 690, 805, 828, 851, 874, 897, 725, 685, 555, 425, 285, 15, 145, 245, 395, 665, 805, 755, 725, 629, 507, 418, 375, 340, 72, 40, -1, 33, 112, 135, 189, 241, 328, 845, 868, 891, 914, 937, 765, 725, 595, 465, 325, 55, 185, 285, 435, 705, 845, 788, 758, 662, 540, 451, 408, 373, 105, 73, 33, -1, 79, 102, 156, 208, 295, 679, 702, 725, 748, 771, 798, 758, 628, 498, 358, 88, 218, 119, 269, 539, 679, 970, 940, 844, 722, 633, 590, 555, 184, 152, 112, 79, -1, 23, 77, 129, 216, 600, 623, 646, 669, 692, 980, 940, 810, 680, 540, 270, 150, 40, 190, 460, 600, 993, 963, 867, 745, 656, 613, 578, 207, 175, 135, 102, 23, -1, 54, 106, 193, 279, 302, 325, 348, 371, 1003, 963, 833, 703, 563, 293, 173, 63, 101, 381, 511, 1117, 1087, 991, 869, 780, 737, 702, 261, 229, 189, 156, 77, 54, -1, 52, 139, 225, 248, 271, 294, 317, 1127, 1087, 957, 827, 687, 427, 297, 197, 47, 327, 457, 1169, 1139, 1043, 921, 832, 789, 754, 313, 281, 241, 208, 129, 106, 52, -1, 87, 173, 196, 219, 242, 265, 1179, 1139, 1009, 879, 739, 479, 349, 249, 99, 112, 252, 1375, 1345, 1249, 1127, 1038, 995, 960, 722, 690, 328, 295, 216, 193, 139, 87, -1, 86, 109, 132, 155, 178, 1385, 1345, 1215, 1085, 945, 675, 555, 445, 305, 25, 165, 1480, 1450, 1354, 1232, 1143, 1100, 1065, 837, 805, 845, 679, 600, 279, 225, 173, 86, -1, 23, 46, 69, 92, 1490, 1450, 1320, 1190, 1050, 790, 660, 560, 410, 140, 0, 1503, 1473, 1377, 1255, 1166, 1123, 1088, 860, 828, 868, 702, 623, 302, 248, 196, 109, 23, -1, 23, 46, 69, 1513, 1473, 1343, 1213, 1073, 813, 683, 583, 433, 163, 23, 1526, 1496, 1400, 1278, 1189, 1146, 1111, 883, 851, 891, 725, 646, 325, 271, 219, 132, 46, 23, -1, 23, 46, 1536, 1496, 1366, 1236, 1096, 836, 706, 606, 456, 186, 46, 1549, 1519, 1423, 1301, 1212, 1169, 1134, 906, 874, 914, 748, 669, 348, 294, 242, 155, 69, 46, 23, -1, 23, 1559, 1519, 1389, 1259, 1119, 859, 729, 629, 479, 209, 69, 1572, 1542, 1446, 1324, 1235, 1192, 1157, 929, 897, 937, 771, 692, 371, 317, 265, 178, 92, 69, 46, 23, -1, 1582, 1542, 1412, 1282, 1142, 882, 752, 652, 502, 232, 92, 0, 40, 90, 112, 317, 490, 455, 542, 725, 765, 798, 980, 1003, 1127, 1179, 1385, 1490, 1513, 1536, 1559, 1582, -1, 40, 160, 290, 430, 700, 820, 930, 1070, 1350, 1480, 40, 0, 50, 72, 277, 450, 415, 502, 685, 725, 758, 940, 963, 1087, 1139, 1345, 1450, 1473, 1496, 1519, 1542, 40, -1, 130, 260, 400, 670, 790, 900, 1040, 1320, 1450, 160, 130, 34, 57, 147, 320, 285, 372, 555, 595, 628, 810, 833, 957, 1009, 1215, 1320, 1343, 1366, 1389, 1412, 160, 130, -1, 130, 270, 540, 660, 770, 910, 1190, 1320, 290, 260, 164, 106, 17, 190, 155, 242, 425, 465, 498, 680, 703, 827, 879, 1085, 1190, 1213, 1236, 1259, 1282, 290, 260, 130, -1, 140, 410, 530, 640, 780, 1060, 1190, 430, 400, 304, 182, 93, 50, 15, 102, 285, 325, 358, 540, 563, 687, 739, 945, 1050, 1073, 1096, 1119, 1142, 430, 400, 270, 140, -1, 270, 390, 500, 640, 920, 1050, 700, 670, 574, 452, 363, 320, 285, 47, 15, 55, 88, 270, 293, 427, 479, 675, 790, 813, 836, 859, 882, 700, 670, 540, 410, 270, -1, 130, 230, 380, 650, 790, 820, 790, 694, 572, 483, 440, 405, 177, 145, 185, 218, 150, 173, 297, 349, 555, 660, 683, 706, 729, 752, 820, 790, 660, 530, 390, 130, -1, 110, 250, 530, 660, 930, 900, 804, 682, 593, 550, 515, 277, 245, 285, 119, 40, 63, 197, 249, 445, 560, 583, 606, 629, 652, 930, 900, 770, 640, 500, 230, 110, -1, 150, 420, 560, 1070, 1040, 944, 822, 733, 690, 655, 427, 395, 435, 269, 190, 101, 47, 99, 305, 410, 433, 456, 479, 502, 1070, 1040, 910, 780, 640, 380, 250, 150, -1, 280, 410, 1350, 1320, 1224, 1102, 1013, 970, 935, 697, 665, 705, 539, 460, 381, 327, 112, 25, 140, 163, 186, 209, 232, 1350, 1320, 1190, 1060, 920, 650, 530, 420, 280, -1, 140, 1480, 1450, 1354, 1232, 1143, 1100, 1065, 837, 805, 845, 679, 600, 511, 457, 252, 165, 0, 23, 46, 69, 92, 1480, 1450, 1320, 1190, 1050, 790, 660, 560, 410, 140, -1]
    T=[-1, 9.0, 29.0, 38.0, 61.0, 67.0, 57.0, 82.0, 80.0, 94.0, 105.0, 125.0, 131.0, 139.0, 154.0, 150.0, 149.0, 156.0, 162.0, 169.0, 176.0, 5.0, 13.0, 28.0, 41.0, 52.0, 71.0, 84.0, 95.0, 109.0, 127.0, 139.0, 9.0, -1, 20.0, 29.0, 53.0, 59.0, 49.0, 74.0, 72.0, 86.0, 97.0, 117.0, 123.0, 131.0, 146.0, 142.0, 141.0, 148.0, 154.0, 161.0, 168.0, 13.0, 5.0, 20.0, 33.0, 44.0, 63.0, 76.0, 87.0, 101.0, 119.0, 131.0, 29.0, 20.0, -1, 9.0, 35.0, 49.0, 59.0, 84.0, 86.0, 100.0, 111.0, 131.0, 137.0, 145.0, 160.0, 156.0, 155.0, 162.0, 168.0, 175.0, 182.0, 33.0, 25.0, 34.0, 47.0, 58.0, 77.0, 90.0, 101.0, 115.0, 133.0, 145.0, 38.0, 29.0, 9.0, -1, 26.0, 40.0, 50.0, 75.0, 83.0, 97.0, 108.0, 128.0, 134.0, 142.0, 157.0, 153.0, 152.0, 159.0, 165.0, 172.0, 179.0, 42.0, 34.0, 43.0, 46.0, 55.0, 74.0, 87.0, 98.0, 112.0, 130.0, 142.0, 61.0, 53.0, 35.0, 26.0, -1, 14.0, 24.0, 49.0, 57.0, 71.0, 82.0, 102.0, 108.0, 116.0, 131.0, 127.0, 126.0, 133.0, 139.0, 146.0, 153.0, 56.0, 48.0, 33.0, 20.0, 29.0, 48.0, 61.0, 72.0, 86.0, 104.0, 116.0, 67.0, 59.0, 49.0, 40.0, 14.0, -1, 10.0, 35.0, 43.0, 57.0, 68.0, 88.0, 94.0, 102.0, 117.0, 113.0, 112.0, 119.0, 125.0, 132.0, 139.0, 62.0, 54.0, 39.0, 26.0, 15.0, 34.0, 47.0, 58.0, 72.0, 90.0, 102.0, 57.0, 49.0, 59.0, 50.0, 24.0, 10.0, -1, 25.0, 33.0, 47.0, 58.0, 78.0, 84.0, 92.0, 107.0, 103.0, 102.0, 109.0, 115.0, 122.0, 129.0, 52.0, 44.0, 29.0, 16.0, 5.0, 24.0, 37.0, 48.0, 62.0, 80.0, 92.0, 82.0, 74.0, 84.0, 75.0, 49.0, 35.0, 25.0, -1, 10.0, 24.0, 35.0, 57.0, 63.0, 78.0, 93.0, 98.0, 97.0, 104.0, 110.0, 117.0, 124.0, 77.0, 69.0, 54.0, 41.0, 30.0, 19.0, 32.0, 43.0, 57.0, 75.0, 87.0, 80.0, 72.0, 86.0, 83.0, 57.0, 43.0, 33.0, 10.0, -1, 14.0, 25.0, 47.0, 53.0, 68.0, 83.0, 88.0, 87.0, 94.0, 100.0, 107.0, 114.0, 75.0, 67.0, 52.0, 39.0, 28.0, 9.0, 22.0, 33.0, 47.0, 65.0, 77.0, 94.0, 86.0, 100.0, 97.0, 71.0, 57.0, 47.0, 24.0, 14.0, -1, 11.0, 33.0, 39.0, 54.0, 69.0, 92.0, 101.0, 108.0, 114.0, 121.0, 128.0, 89.0, 81.0, 66.0, 53.0, 42.0, 23.0, 36.0, 47.0, 61.0, 79.0, 91.0, 105.0, 97.0, 111.0, 108.0, 82.0, 68.0, 58.0, 35.0, 25.0, 11.0, -1, 22.0, 28.0, 43.0, 58.0, 81.0, 106.0, 113.0, 119.0, 126.0, 133.0, 100.0, 92.0, 77.0, 64.0, 53.0, 34.0, 47.0, 52.0, 66.0, 84.0, 96.0, 125.0, 117.0, 131.0, 128.0, 102.0, 88.0, 78.0, 57.0, 47.0, 33.0, 22.0, -1, 6.0, 21.0, 36.0, 59.0, 84.0, 91.0, 97.0, 104.0, 111.0, 120.0, 112.0, 97.0, 84.0, 73.0, 54.0, 41.0, 30.0, 44.0, 62.0, 74.0, 131.0, 123.0, 137.0, 134.0, 108.0, 94.0, 84.0, 63.0, 53.0, 39.0, 28.0, 6.0, -1, 15.0, 30.0, 53.0, 78.0, 85.0, 91.0, 98.0, 105.0, 126.0, 118.0, 103.0, 90.0, 79.0, 60.0, 47.0, 36.0, 45.0, 63.0, 75.0, 139.0, 131.0, 145.0, 142.0, 116.0, 102.0, 92.0, 78.0, 68.0, 54.0, 43.0, 21.0, 15.0, -1, 15.0, 38.0, 63.0, 70.0, 76.0, 83.0, 90.0, 134.0, 126.0, 111.0, 98.0, 87.0, 68.0, 55.0, 44.0, 30.0, 48.0, 60.0, 154.0, 146.0, 160.0, 157.0, 131.0, 117.0, 107.0, 93.0, 83.0, 69.0, 58.0, 36.0, 30.0, 15.0, -1, 23.0, 48.0, 55.0, 61.0, 68.0, 75.0, 149.0, 141.0, 126.0, 113.0, 102.0, 83.0, 70.0, 59.0, 45.0, 46.0, 58.0, 150.0, 142.0, 156.0, 153.0, 127.0, 113.0, 103.0, 98.0, 88.0, 92.0, 81.0, 59.0, 53.0, 38.0, 23.0, -1, 25.0, 32.0, 38.0, 45.0, 52.0, 145.0, 137.0, 122.0, 109.0, 98.0, 79.0, 66.0, 55.0, 41.0, 23.0, 35.0, 149.0, 141.0, 155.0, 152.0, 126.0, 112.0, 102.0, 97.0, 87.0, 101.0, 106.0, 84.0, 78.0, 63.0, 48.0, 25.0, -1, 7.0, 13.0, 20.0, 27.0, 144.0, 136.0, 121.0, 108.0, 97.0, 78.0, 65.0, 54.0, 40.0, 22.0, 10.0, 156.0, 148.0, 162.0, 159.0, 133.0, 119.0, 109.0, 104.0, 94.0, 108.0, 113.0, 91.0, 85.0, 70.0, 55.0, 32.0, 7.0, -1, 6.0, 13.0, 20.0, 151.0, 143.0, 128.0, 115.0, 104.0, 85.0, 72.0, 61.0, 47.0, 29.0, 17.0, 162.0, 154.0, 168.0, 165.0, 139.0, 125.0, 115.0, 110.0, 100.0, 114.0, 119.0, 97.0, 91.0, 76.0, 61.0, 38.0, 13.0, 6.0, -1, 7.0, 14.0, 157.0, 149.0, 134.0, 121.0, 110.0, 91.0, 78.0, 67.0, 53.0, 35.0, 23.0, 169.0, 161.0, 175.0, 172.0, 146.0, 132.0, 122.0, 117.0, 107.0, 121.0, 126.0, 104.0, 98.0, 83.0, 68.0, 45.0, 20.0, 13.0, 7.0, -1, 7.0, 164.0, 156.0, 141.0, 128.0, 117.0, 98.0, 85.0, 74.0, 60.0, 42.0, 30.0, 176.0, 168.0, 182.0, 179.0, 153.0, 139.0, 129.0, 124.0, 114.0, 128.0, 133.0, 111.0, 105.0, 90.0, 75.0, 52.0, 27.0, 20.0, 14.0, 7.0, -1, 171.0, 163.0, 148.0, 135.0, 124.0, 105.0, 92.0, 81.0, 67.0, 49.0, 37.0, 5.0, 13.0, 33.0, 42.0, 56.0, 62.0, 52.0, 77.0, 75.0, 89.0, 100.0, 120.0, 126.0, 134.0, 149.0, 145.0, 144.0, 151.0, 157.0, 164.0, 171.0, -1, 8.0, 23.0, 36.0, 47.0, 66.0, 79.0, 90.0, 104.0, 122.0, 134.0, 13.0, 5.0, 25.0, 34.0, 48.0, 54.0, 44.0, 69.0, 67.0, 81.0, 92.0, 112.0, 118.0, 126.0, 141.0, 137.0, 136.0, 143.0, 149.0, 156.0, 163.0, 8.0, -1, 15.0, 28.0, 39.0, 58.0, 71.0, 82.0, 96.0, 114.0, 126.0, 28.0, 20.0, 34.0, 43.0, 33.0, 39.0, 29.0, 54.0, 52.0, 66.0, 77.0, 97.0, 103.0, 111.0, 126.0, 122.0, 121.0, 128.0, 134.0, 141.0, 148.0, 23.0, 15.0, -1, 13.0, 24.0, 43.0, 56.0, 67.0, 81.0, 99.0, 111.0, 41.0, 33.0, 47.0, 46.0, 20.0, 26.0, 16.0, 41.0, 39.0, 53.0, 64.0, 84.0, 90.0, 98.0, 113.0, 109.0, 108.0, 115.0, 121.0, 128.0, 135.0, 36.0, 28.0, 13.0, -1, 11.0, 30.0, 43.0, 54.0, 68.0, 86.0, 98.0, 52.0, 44.0, 58.0, 55.0, 29.0, 15.0, 5.0, 30.0, 28.0, 42.0, 53.0, 73.0, 79.0, 87.0, 102.0, 98.0, 97.0, 104.0, 110.0, 117.0, 124.0, 47.0, 39.0, 24.0, 11.0, -1, 19.0, 32.0, 43.0, 57.0, 75.0, 87.0, 71.0, 63.0, 77.0, 74.0, 48.0, 34.0, 24.0, 19.0, 9.0, 23.0, 34.0, 54.0, 60.0, 68.0, 83.0, 79.0, 78.0, 85.0, 91.0, 98.0, 105.0, 66.0, 58.0, 43.0, 30.0, 19.0, -1, 13.0, 24.0, 38.0, 56.0, 68.0, 84.0, 76.0, 90.0, 87.0, 61.0, 47.0, 37.0, 32.0, 22.0, 36.0, 47.0, 41.0, 47.0, 55.0, 70.0, 66.0, 65.0, 72.0, 78.0, 85.0, 92.0, 79.0, 71.0, 56.0, 43.0, 32.0, 13.0, -1, 11.0, 25.0, 43.0, 55.0, 95.0, 87.0, 101.0, 98.0, 72.0, 58.0, 48.0, 43.0, 33.0, 47.0, 52.0, 30.0, 36.0, 44.0, 59.0, 55.0, 54.0, 61.0, 67.0, 74.0, 81.0, 90.0, 82.0, 67.0, 54.0, 43.0, 24.0, 11.0, -1, 14.0, 32.0, 44.0, 109.0, 101.0, 115.0, 112.0, 86.0, 72.0, 62.0, 57.0, 47.0, 61.0, 66.0, 44.0, 45.0, 30.0, 45.0, 41.0, 40.0, 47.0, 53.0, 60.0, 67.0, 104.0, 96.0, 81.0, 68.0, 57.0, 38.0, 25.0, 14.0, -1, 18.0, 30.0, 127.0, 119.0, 133.0, 130.0, 104.0, 90.0, 80.0, 75.0, 65.0, 79.0, 84.0, 62.0, 63.0, 48.0, 46.0, 23.0, 22.0, 29.0, 35.0, 42.0, 49.0, 122.0, 114.0, 99.0, 86.0, 75.0, 56.0, 43.0, 32.0, 18.0, -1, 12.0, 139.0, 131.0, 145.0, 142.0, 116.0, 102.0, 92.0, 87.0, 77.0, 91.0, 96.0, 74.0, 75.0, 60.0, 58.0, 35.0, 10.0, 17.0, 23.0, 30.0, 37.0, 134.0, 126.0, 111.0, 98.0, 87.0, 68.0, 55.0, 44.0, 30.0, 12.0, -1]
    for i in range(0,len(path)):
        count+=cost[start][path[i][0]]
        for j in range(1,len(path[i])):
            #print(cost[path[i][j]][path[i][j-1]])
            count+=cost[path[i][j]][path[i][j-1]]
            #print("count:{}".format(count))
        c.append(count+1)
        count=0
    for i in range(0,len(path)):
        count+=time[start][path[i][0]]
        for j in range(1,len(path[i])): count+=time[path[i][j]][path[i][j-1]]
        t.append(count+1)
        count=0
    #print("c,t:{},{}".format(c,t))
    if min(c)>=C[32*start+des]:
        print("fastest and cheapest:")
        return path[c.index(min(c))],C[32*start+des],T[32*start+des]
    else:
        print(C[32*start+des],T[32*start+des])
        #print(c,t)
        for i in range(0,len(path)):
            if t[i]==T[32*start+des] : cp.append(0) 
            else:
                if (C[32*start+des]-c[i])/(t[i]-T[32*start+des]) >0 and c[i]<C[32*start+des] and t[i]>T[32*start+des]: 
                    cp.append((C[32*start+des]-c[i])/(t[i]-T[32*start+des]))
            #print(cp)
        if c[cp.index(max(cp))]>C[32*start+des]:
            print("fastest and cheapest:")
            return path[c.index(min(c))],C[32*start+des],T[32*start+des]
        else:
            return path[cp.index(max(cp))],c[cp.index(max(cp))],t[cp.index(max(cp))]
    
cost=[[-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[23,-1,50,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,50,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,72,23,-1,89,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,89,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,43,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,35,-1,87,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,87,-1,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,32,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,40,-1,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,-1,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,47,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,-1,87,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,87,-1,86,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,86,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
#-----高鐵----
[0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,160,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,-1,130,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,160,130,-1,130,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,130,-1,140,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,140,-1,270,390,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,270,-1,130,230,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,390,130,-1,110,250,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,230,110,-1,150,420,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,250,150,-1,280,410],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,420,280,-1,140],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,410,140,-1]]
time=[[-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[9,-1,20,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,20,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,29,9,-1,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,26,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,14,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,10,-1,25,-1,-1,-1,-1,-1,-1,-1,-1	,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,25,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,10,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,14,-1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
#-----高鐵----
[5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,23,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,15,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,15,-1,13,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,13,-1,11,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,19,32,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,13,24,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,13,-1,11,25,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,11,-1,14,32,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,14,-1,18,30],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,18,-1,12],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,12,-1]]
start = 23
des = 13
route = [start]
path=[]
c=[]
best_path=[]
iterate(start,des,route,cost,path)
best_path,best_c,best_t = cp(start,des,cost,time,path)
#print(best_path)
for i in range(2,len(best_path)-2):
    #print(best_path[i])
    if best_path[i]==3 and best_path[i-2]==1:
        del best_path[i-1]
        best_c  = best_c-1
    elif best_path[i]==23 and best_path[i-2]==21:
        del best_path[i-1]
        best_c  = best_c-10
    elif best_path[i]==27 and best_path[i-2]==25:
        del best_path[i-1]
        best_c  = best_c-10
    elif best_path[i]==28 and best_path[i-2]==26:
        del best_path[i-1]
        best_c  = best_c-10
    elif best_path[i]==29 and best_path[i-2]==27:
        del best_path[i-1]
    elif best_path[i]==30 and best_path[i-2]==28:
        del best_path[i-1]
        best_c  = best_c-10
    elif best_path[i]==31 and best_path[i-2]==29:
        del best_path[i-1]
        best_c  = best_c-10
print(best_path,best_c,best_t)
